{"version":3,"file":"799.bundle.cd2ddbbd5ef862756009.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/viewports/TrackedCornerstoneViewport.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport OHIF, { utils } from '@ohif/core';\r\n\r\nimport {\r\n  Notification,\r\n  ViewportActionBar,\r\n  useViewportDialog,\r\n  Tooltip,\r\n  Icon,\r\n} from '@ohif/ui';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { annotation } from '@cornerstonejs/tools';\r\nimport { useTrackedMeasurements } from './../getContextModule';\r\n\r\nconst { formatDate } = utils;\r\n\r\nfunction TrackedCornerstoneViewport(props) {\r\n  const {\r\n    children,\r\n    displaySets,\r\n    viewportIndex,\r\n    viewportLabel,\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n    viewportOptions,\r\n  } = props;\r\n\r\n  const { t } = useTranslation('TrackedViewport');\r\n\r\n  const {\r\n    measurementService,\r\n    cornerstoneViewportService,\r\n  } = servicesManager.services;\r\n\r\n  // Todo: handling more than one displaySet on the same viewport\r\n  const displaySet = displaySets[0];\r\n\r\n  const [trackedMeasurements] = useTrackedMeasurements();\r\n  const [viewportDialogState] = useViewportDialog();\r\n  const [isTracked, setIsTracked] = useState(false);\r\n  const [trackedMeasurementUID, setTrackedMeasurementUID] = useState(null);\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n  const viewportId = viewportOptions.viewportId;\r\n\r\n  const {\r\n    Modality,\r\n    SeriesDate,\r\n    SeriesDescription,\r\n    SeriesInstanceUID,\r\n    SeriesNumber,\r\n  } = displaySet;\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    SpacingBetweenSlices,\r\n    ManufacturerModelName,\r\n  } = displaySet.images[0];\r\n\r\n  useEffect(() => {\r\n    if (isTracked) {\r\n      annotation.config.style.setViewportToolStyles(viewportId, {\r\n        global: {\r\n          lineDash: '',\r\n        },\r\n      });\r\n\r\n      cornerstoneViewportService\r\n        .getRenderingEngine()\r\n        .renderViewport(viewportId);\r\n\r\n      return;\r\n    }\r\n\r\n    annotation.config.style.setViewportToolStyles(`viewport-${viewportIndex}`, {\r\n      global: {\r\n        lineDash: '4,4',\r\n      },\r\n    });\r\n\r\n    cornerstoneViewportService.getRenderingEngine().renderViewport(viewportId);\r\n\r\n    return () => {\r\n      annotation.config.style.setViewportToolStyles(viewportId, {});\r\n    };\r\n  }, [isTracked]);\r\n\r\n  if (trackedSeries.includes(SeriesInstanceUID) !== isTracked) {\r\n    setIsTracked(!isTracked);\r\n  }\r\n\r\n  function switchMeasurement(direction) {\r\n    const newTrackedMeasurementUID = _getNextMeasurementUID(\r\n      direction,\r\n      servicesManager,\r\n      trackedMeasurementUID,\r\n      trackedMeasurements\r\n    );\r\n\r\n    if (!newTrackedMeasurementUID) {\r\n      return;\r\n    }\r\n\r\n    setTrackedMeasurementUID(newTrackedMeasurementUID);\r\n\r\n    measurementService.jumpToMeasurement(\r\n      viewportIndex,\r\n      newTrackedMeasurementUID\r\n    );\r\n  }\r\n\r\n  const getCornerstoneViewport = () => {\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    return <Component {...props} />;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        useAltStyling={isTracked}\r\n        onArrowsClick={direction => switchMeasurement(direction)}\r\n        getStatusComponent={() => _getStatusComponent(isTracked)}\r\n        studyData={{\r\n          label: viewportLabel,\r\n          studyDate: formatDate(SeriesDate), // TODO: This is series date. Is that ok?\r\n          currentSeries: SeriesNumber, // TODO - switch entire currentSeries to be UID based or actual position based\r\n          seriesDescription: SeriesDescription,\r\n          patientInformation: {\r\n            patientName: PatientName ? OHIF.utils.formatPN(PatientName) : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness\r\n              ? `${parseFloat(SliceThickness).toFixed(2)}mm`\r\n              : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined\r\n                ? `${parseFloat(SpacingBetweenSlices).toFixed(2)}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n      />\r\n      {/* TODO: Viewport interface to accept stack or layers of content like this? */}\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        {getCornerstoneViewport()}\r\n        <div className=\"absolute w-full\">\r\n          {viewportDialogState.viewportIndex === viewportIndex && (\r\n            <Notification\r\n              id={viewportDialogState.id}\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTrackedCornerstoneViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nTrackedCornerstoneViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nfunction _getNextMeasurementUID(\r\n  direction,\r\n  servicesManager,\r\n  trackedMeasurementId,\r\n  trackedMeasurements\r\n) {\r\n  const { measurementService, viewportGridService } = servicesManager.services;\r\n  const measurements = measurementService.getMeasurements();\r\n\r\n  const { activeViewportIndex, viewports } = viewportGridService.getState();\r\n  const {\r\n    displaySetInstanceUIDs: activeViewportDisplaySetInstanceUIDs,\r\n  } = viewports[activeViewportIndex];\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // Get the potentially trackable measurements for the series of the\r\n  // active viewport.\r\n  // The measurements to jump between are the same\r\n  // regardless if this series is tracked or not.\r\n\r\n  const filteredMeasurements = measurements.filter(\r\n    m =>\r\n      trackedSeries.includes(m.referenceSeriesUID) &&\r\n      activeViewportDisplaySetInstanceUIDs.includes(m.displaySetInstanceUID)\r\n  );\r\n\r\n  if (!filteredMeasurements.length) {\r\n    // No measurements on this series.\r\n    return;\r\n  }\r\n\r\n  const measurementCount = filteredMeasurements.length;\r\n\r\n  const uids = filteredMeasurements.map(fm => fm.uid);\r\n  let measurementIndex = uids.findIndex(uid => uid === trackedMeasurementId);\r\n\r\n  if (measurementIndex === -1) {\r\n    // Not tracking a measurement, or previous measurement now deleted, revert to 0.\r\n    measurementIndex = 0;\r\n  } else {\r\n    if (direction === 'left') {\r\n      measurementIndex--;\r\n\r\n      if (measurementIndex < 0) {\r\n        measurementIndex = measurementCount - 1;\r\n      }\r\n    } else if (direction === 'right') {\r\n      measurementIndex++;\r\n\r\n      if (measurementIndex === measurementCount) {\r\n        measurementIndex = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  const newTrackedMeasurementId = uids[measurementIndex];\r\n\r\n  return newTrackedMeasurementId;\r\n}\r\n\r\nfunction _getStatusComponent(isTracked) {\r\n  const trackedIcon = isTracked ? 'status-tracked' : 'status-untracked';\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Tooltip\r\n        position=\"bottom-left\"\r\n        content={\r\n          <div className=\"flex py-2\">\r\n            <div className=\"flex pt-1\">\r\n              <Icon name=\"info-link\" className=\"w-4 text-primary-main\" />\r\n            </div>\r\n            <div className=\"flex ml-4\">\r\n              <span className=\"text-base text-common-light\">\r\n                {isTracked ? (\r\n                  <>\r\n                    Series is\r\n                    <span className=\"font-bold text-white\"> tracked</span> and\r\n                    can be viewed <br /> in the measurement panel\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    Measurements for\r\n                    <span className=\"font-bold text-white\"> untracked </span>\r\n                    series <br /> will not be shown in the <br /> measurements\r\n                    panel\r\n                  </>\r\n                )}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        }\r\n      >\r\n        <Icon name={trackedIcon} className=\"text-primary-light\" />\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrackedCornerstoneViewport;\r\n"],"names":["formatDate","utils","TrackedCornerstoneViewport","props","children","displaySets","viewportIndex","viewportLabel","servicesManager","extensionManager","commandsManager","viewportOptions","t","useTranslation","measurementService","cornerstoneViewportService","services","displaySet","trackedMeasurements","useTrackedMeasurements","viewportDialogState","useViewportDialog","isTracked","setIsTracked","useState","trackedMeasurementUID","setTrackedMeasurementUID","trackedSeries","context","viewportId","Modality","SeriesDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","SpacingBetweenSlices","ManufacturerModelName","images","useEffect","annotation","global","lineDash","getRenderingEngine","renderViewport","includes","onDoubleClick","evt","stopPropagation","preventDefault","useAltStyling","onArrowsClick","direction","newTrackedMeasurementUID","trackedMeasurementId","viewportGridService","measurements","getMeasurements","activeViewportIndex","viewports","getState","displaySetInstanceUIDs","activeViewportDisplaySetInstanceUIDs","filteredMeasurements","filter","m","referenceSeriesUID","displaySetInstanceUID","length","measurementCount","uids","map","fm","uid","measurementIndex","findIndex","_getNextMeasurementUID","jumpToMeasurement","switchMeasurement","getStatusComponent","trackedIcon","className","position","content","name","_getStatusComponent","studyData","label","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","patientSex","patientAge","MRN","thickness","parseFloat","toFixed","spacing","undefined","scanner","component","Component","getModuleEntry","getCornerstoneViewport","id","message","type","actions","onSubmit","onOutsideClick","propTypes","PropTypes","isRequired","dataSource","customProps","defaultProps"],"sourceRoot":""}